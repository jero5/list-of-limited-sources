# list of limited sources
# Copyright (c) 2008 Jeremy Roach
# Licensed under The MIT License

(class LOLsRuby

  (= REGEX_TOKENS / \\ ['\\"\/] | [#\\'()"\/] | [^\s#\\'()"\/]+ | \s+ /x)

  (def transform (str)
    (= tokens (str.scan REGEX_TOKENS))
    (= parser (Parser.new tokens))
    (= dumper Dumper.new)
    (= serializer Serializer.new)
    (= ary parser.run)
    (dumper.run ary)))

(class (< Parser LOLsRuby)

  (attr_accessor (, :tokens :stack :status))

  (def initialize (tokens)
    (= @tokens tokens)
    (= @stack []))

  (def finalize ()
    )

  (def left_parenthesis ()
    (case @status
    (when (, :within_string_sq :within_string_dq :within_regex)
      (<< (@stack[][] -1 -1) '('))
    (else
      (= ary [])
      (<< (@stack[] -1) ary)
      (<< @stack ary)))
    run)

  (def right_parenthesis ()
    )

  (def hash ()
    )

  (def double_quote ()
    )

  (def single_quote ()
    )

  (def forward_slash ()
    )

  (def backslash ()
    )

  (def whitespace ()
    )

  (def escaped_character (token)
    )

  (def word (token)
    )

  (def run ((= token @tokens.shift))
    (if token.nil?
      finalize
    (else
      (case token
      (when '('
        left_parenthesis)
      (when ')'
        right_parenthesis)
      (when '#'
        hash)
      (when '"'
        double_quote)
      (when '\''
        single_quote)
      (when '/'
        forward_slash)
      (when '\\'
        backslash)
      (when /\A\s+\Z/
        whitespace)
      (when (, '\\\\' '\\\'' '\\"' '\\/')
        (escaped_character token))
      (else
        (word token)))))))

(class (< Dumper LOLsRuby)

  (def run (ary)
    ))

(class (< Serializer LOLsRuby)

  (def run (ary)
    ))

(class (< Optimizer LOLsRuby)

  (def run (ary)
    ))

(LOLsRuby.new.transform STDIN.read)

